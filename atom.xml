<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简</title>
  
  
  <link href="https://www.searoadtrip.top/atom.xml" rel="self"/>
  
  <link href="https://www.searoadtrip.top/"/>
  <updated>2021-06-25T07:39:53.112Z</updated>
  <id>https://www.searoadtrip.top/</id>
  
  <author>
    <name>简</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的堆(heap)、栈(stack)</title>
    <link href="https://www.searoadtrip.top/2021/06/25/javaheapstack/"/>
    <id>https://www.searoadtrip.top/2021/06/25/javaheapstack/</id>
    <published>2021-06-25T06:10:02.000Z</published>
    <updated>2021-06-25T07:39:53.112Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>栈与堆都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。</p></li><li><p> Java的堆是一个运行时数据区，类的对象从中分配空间。这些对象通过new、newarray、anewarray和 multianewarray等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。</p></li><li><p>栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量（int, short, long, byte, float, double, boolean, char）和对象句柄。栈有一个很重要的特殊性，就是存在栈中的数据可以共享。<br>假设我们同时定义：</p><p>int a = 3;<br>int b = 3;</p><p>编译器先处理 int a = 3; 首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理 int b = 3; 在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。这时，如果再令 a=4; 那么编译器会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p></li><li><p>要注意这种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a的修改并不会影响到b, 它是由编译器完成的，它有利于节省空间。而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量。<br>String是一个特殊的包装类数据。</p><p>可以用：<br>String str = new String(“abc”);<br>String str = “abc”;</p><p>两种的形式来创建，第一种是用new()来新建对象的，它会在存放于堆中。每调用一次就会创建一个新的对象。 而第二种是先在栈中创建一个对String类的对象引用变量str，然后查找栈中有没有存放”abc”，如果没有，则将”abc”存放进栈，并令str指 向”abc”，如果已经有”abc”则直接令str指向“abc”。</p><p>比较类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==，下面用例子说明上面的理论。<br>String str1 = “abc”;<br>String str2 = “abc”;<br>System.out.println(str1==str2); //true<br>可以看出str1和str2是指向同一个对象的。</p><p>String str1 =new String (“abc”);<br>String str2 =new String (“abc”);<br>System.out.println(str1==str2); // false<br>用new的方式是生成不同的对象。每一次生成一个。</p><p>因此用第二种方式(String str1 =”abc”)创建多个”abc”字符串,在内存中其实只存在一个对象而已. 这种写法有利与节省内存空间. 同时它可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(“abc”)的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。</p><p>另一方面, 要注意：我们在使用诸如String str = “abc”；的格式定义类时，总是想当然地认为，创建了String类的对象str。担心陷阱！对象可能并没有被创建！而可能只是指向一个先前已经创建的 对象。只有通过new()方法才能保证每次都创建一个新的对象。<br>由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。<a href="https://www.cnblogs.com/zhxhdean/archive/2011/03/26/1996468.html">原文</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈与堆都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt; Java的堆是一个运行时数据区，类的对象从中分配空间。这些对象通过new、newarray、anewar</summary>
      
    
    
    
    <category term="Java" scheme="https://www.searoadtrip.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.searoadtrip.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>德格</title>
    <link href="https://www.searoadtrip.top/2021/06/17/dege/"/>
    <id>https://www.searoadtrip.top/2021/06/17/dege/</id>
    <published>2021-06-17T03:25:45.000Z</published>
    <updated>2021-06-17T04:23:40.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="德格"><a href="#德格" class="headerlink" title="德格"></a>德格</h2><p>五月的德格好美</p><p><img src="https://cdn.jsdelivr.net/gh/justcallmeseven/hexoservice/images/dege.jpg" alt="五月的德格"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;德格&quot;&gt;&lt;a href=&quot;#德格&quot; class=&quot;headerlink&quot; title=&quot;德格&quot;&gt;&lt;/a&gt;德格&lt;/h2&gt;&lt;p&gt;五月的德格好美&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/justcallmeseven/h</summary>
      
    
    
    
    <category term="Trip" scheme="https://www.searoadtrip.top/categories/Trip/"/>
    
    
    <category term="Trip" scheme="https://www.searoadtrip.top/tags/Trip/"/>
    
  </entry>
  
  <entry>
    <title>something about hexo</title>
    <link href="https://www.searoadtrip.top/2021/06/16/something-hexo/"/>
    <id>https://www.searoadtrip.top/2021/06/16/something-hexo/</id>
    <published>2021-06-16T14:04:36.000Z</published>
    <updated>2021-06-19T03:51:42.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HEXO设置"><a href="#HEXO设置" class="headerlink" title="HEXO设置"></a>HEXO设置</h2><ul><li><p>安装 Hexo 需要先安装下列应用程序</p><ol><li>Node.js（Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）</li><li>Git</li></ol></li><li><p>淘宝镜像（即cnpm），它把npm官方的“包”全部搬到国内(卸载 npm uninstall cnpm -g)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">cnpm</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p>Git命令(卸载 npm uninstall hexo-cli -g)<br>下面选择一个执行（建议cnpm）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br></pre></td></tr></table></figure></li><li><p>在空文件下执行初始化</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">init</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">init</span> <span class="string">myblog</span>   <span class="string">//myblog名字自己取</span></span><br><span class="line"><span class="string">cd</span> <span class="string">myblog</span>              <span class="string">//进入myblog文件夹</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><p>init 执行到 Install dependencies 的时候可能会卡住 Ctrl C 退出</p><p>以上方法要是不能完成博客的初始化，尝试下面方法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://e.coding.net/hellosummer/myhexoblog/myhexoblog.git</span></span><br></pre></td></tr></table></figure><p>把克隆下来的复制到myblog，在myblog执行cnpm install</p></li><li><p>hexo g      //生成/public文件夹，里面是网站/生成静态文件<br>hexo s      //若报错，执行下一步,没有报错忽略</p><p><em>Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-server</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><p>有时可能报：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm WARN optional SKIPPING OPTIONAL DEPENDENCY:</span> <span class="string">fsevents@2.3.2(node_modules\fsevents):</span></span><br><span class="line"><span class="attr">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY:</span> <span class="string">Unsupported</span> <span class="string">platform</span> <span class="string">for</span> <span class="string">fsevents@2.3.2:</span> <span class="string">wanted</span> &#123;<span class="string">&quot;os&quot;</span><span class="string">:&quot;darwin&quot;</span>,<span class="string">&quot;arch&quot;</span><span class="string">:&quot;any&quot;</span>&#125; <span class="string">(current:</span> &#123;<span class="string">&quot;os&quot;</span><span class="string">:&quot;win32&quot;</span>,<span class="string">&quot;arch&quot;</span><span class="string">:&quot;x64&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这不是什么大问题，只是你的某些包依赖fsevents包，而fsevents包是MacOS系统下，在Windows/Linux下会提示警告，但不会安装</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">s</span></span><br><span class="line"><span class="string">INFO</span>  <span class="string">Start</span> <span class="string">processing</span></span><br><span class="line"><span class="string">INFO</span>  <span class="string">Hexo</span> <span class="string">is</span> <span class="string">running</span> <span class="string">at</span> <span class="string">http://localhost:4000</span> <span class="string">.</span> <span class="string">Press</span> <span class="string">Ctrl+C</span> <span class="string">to</span> <span class="string">stop.</span></span><br></pre></td></tr></table></figure><p>出现这样的信息即可访问</p></li></ul><hr><h2 id="部署GIT"><a href="#部署GIT" class="headerlink" title="部署GIT"></a>部署GIT</h2><ol><li>在博客根目录下打开git bash，分别执行下面的命令：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;yourname&quot;</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建一个git秘钥<br>打开git bash（哪里打开无所谓），执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ssh-keygen</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">-C</span> <span class="string">&quot;youremail&quot;</span>   <span class="string">//一路回车</span></span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">~/.ssh/id_rsa.pub</span>              <span class="string">//面板查看输出的密匙，复制</span></span><br></pre></td></tr></table></figure></li><li><p>Github网页&gt;&gt;&gt;Settings&gt;&gt;&gt;Deploy keys</p><p>然后打开git bash</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ssh</span> <span class="string">-T</span> <span class="string">git@github.com</span></span><br></pre></td></tr></table></figure><p>提示下面这个，输入yes回车<br>Are you sure you want to continue connecting (yes/no/[fingerprint])? </p></li><li><p>打开项目，选 SSH 复制git开头的地址</p><p>打开站点配置文件，修改deploy信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span>  <span class="string">（repo:也可以）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>如果网站在服务器上，则可以用 rsync</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">rsync</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">服务器名</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">用户名</span></span><br><span class="line">  <span class="attr">root:</span> <span class="string">放网站的文件夹</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure></li><li><p>然后安装上传插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录下打开git bash，执行下面的命令上传</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HEXO设置&quot;&gt;&lt;a href=&quot;#HEXO设置&quot; class=&quot;headerlink&quot; title=&quot;HEXO设置&quot;&gt;&lt;/a&gt;HEXO设置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装 Hexo 需要先安装下列应用程序&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node.js（Node</summary>
      
    
    
    
    <category term="Hexo" scheme="https://www.searoadtrip.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.searoadtrip.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
